var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Samplers","page":"API","title":"Samplers","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"AdvancedPS introduces a few samplers extending AbstractMCMC. The sample method expects a custom type that subtypes AbstractMCMC.AbstractModel. The available samplers are listed below:","category":"page"},{"location":"api/#SMC","page":"API","title":"SMC","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"AdvancedPS.SMC","category":"page"},{"location":"api/#AdvancedPS.SMC","page":"API","title":"AdvancedPS.SMC","text":"SMC(n[, resampler = ResampleWithESSThreshold()])\nSMC(n, [resampler = resample_systematic, ]threshold)\n\nCreate a sequential Monte Carlo (SMC) sampler with n particles.\n\nIf the algorithm for the resampling step is not specified explicitly, systematic resampling is performed if the estimated effective sample size per particle drops below 0.5.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"The SMC sampler populates a set of particles in a AdvancedPS.ParticleContainer and performs a AdvancedPS.sweep! which  propagates the particles and provides an estimation of the log-evidence","category":"page"},{"location":"api/","page":"API","title":"API","text":"sampler = SMC(nparticles) \nchains = sample(model, sampler)","category":"page"},{"location":"api/#Particle-Gibbs","page":"API","title":"Particle Gibbs","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"AdvancedPS.PG","category":"page"},{"location":"api/#AdvancedPS.PG","page":"API","title":"AdvancedPS.PG","text":"PG(n, [resampler = ResampleWithESSThreshold()])\nPG(n, [resampler = resample_systematic, ]threshold)\n\nCreate a Particle Gibbs sampler with n particles.\n\nIf the algorithm for the resampling step is not specified explicitly, systematic resampling is performed if the estimated effective sample size per particle drops below 0.5.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"The Particle Gibbs introduced in [2] runs a sequence of conditional SMC steps where a pre-selected particle, the reference particle, is replayed and propagated through  the SMC step.","category":"page"},{"location":"api/","page":"API","title":"API","text":"sampler = PG(nparticles)\nchains = sample(model, sampler, nchains)","category":"page"},{"location":"api/","page":"API","title":"API","text":"For more detailed examples please refer to the Examples page.","category":"page"},{"location":"api/#Resampling","page":"API","title":"Resampling","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"AdvancedPS implements adaptive resampling for both AdvancedPS.PG and AdvancedPS.SMC. The following resampling schemes are implemented:","category":"page"},{"location":"api/","page":"API","title":"API","text":"AdvancedPS.resample_multinomial\nAdvancedPS.resample_residual\nAdvancedPS.resample_stratified\nAdvancedPS.resample_systematic","category":"page"},{"location":"api/#AdvancedPS.resample_multinomial","page":"API","title":"AdvancedPS.resample_multinomial","text":"resample_multinomial(rng, weights, n)\n\nReturn a vector of n samples x₁, ..., xₙ from the numbers 1, ..., length(weights), generated by multinomial resampling.\n\nThe new indices are sampled from the multinomial distribution with probabilities equal to weights\n\n\n\n\n\n","category":"function"},{"location":"api/#AdvancedPS.resample_residual","page":"API","title":"AdvancedPS.resample_residual","text":"resample_residual(rng, weights, n)\n\nReturn a vector of n samples x₁, ..., xₙ from the numbers 1, ..., length(weights), generated by residual resampling.\n\nIn residual resampling we start by duplicating all the particles whose weight is bigger than 1/n. We copy each of these particles N_i times where\n\nN_i = leftlfloor n w_i rightrfloor\n\nWe then duplicate the R_t = n - sum_i N_i missing particles using multinomial resampling with the residual weights given by:\n\ntildew = w_i - fracN_iN\n\n\n\n\n\n","category":"function"},{"location":"api/#AdvancedPS.resample_stratified","page":"API","title":"AdvancedPS.resample_stratified","text":"resample_stratified(rng, weights, n)\n\nReturn a vector of n samples x₁, ..., xₙ from the numbers 1, ..., length(weights), generated by stratified resampling.\n\nIn stratified resampling n ordered random numbers u₁, ..., uₙ are generated, where\n\nuₖ sim U(k - 1)  n k  n). \n\nBased on these numbers the samples x₁, ..., xₙ are selected according to  the multinomial distribution defined by the normalized weights, i.e., xᵢ = j if and only if\n\nuᵢ in leftsum_s=1^j-1 weights_s sum_s=1^j weights_sright).\n\n\n\n\n\n","category":"function"},{"location":"api/#AdvancedPS.resample_systematic","page":"API","title":"AdvancedPS.resample_systematic","text":"resample_systematic(rng, weights, n)\n\nReturn a vector of n samples x₁, ..., xₙ from the numbers 1, ..., length(weights), generated by systematic resampling.\n\nIn systematic resampling a random number u sim U0 1) is used to generate n ordered numbers u₁, ..., uₙ where \n\nuₖ = (u + k  1)  n. \n\nBased on these numbers the samples x₁, ..., xₙ are selected according to  the multinomial distribution defined by the normalized weights, i.e., xᵢ = j if and only if\n\nuᵢ in leftsum_s=1^j-1 weights_s sum_s=1^j weights_sright)\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"Each of these schemes is wrapped in a AdvancedPS.ResampleWithESSThreshold struct to trigger a resampling step whenever the ESS is below a certain threshold.","category":"page"},{"location":"api/","page":"API","title":"API","text":"AdvancedPS.ResampleWithESSThreshold","category":"page"},{"location":"api/#AdvancedPS.ResampleWithESSThreshold","page":"API","title":"AdvancedPS.ResampleWithESSThreshold","text":"ResampleWithESSThreshold{R,T<:Real}\n\nPerform resampling using R if the effective sample size is below T. By default we use resample_systematic with a threshold of 0.5\n\n\n\n\n\n","category":"type"},{"location":"api/#RNG","page":"API","title":"RNG","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"AdvancedPS replays the individual trajectories instead of storing the intermediate values. This way we can build efficient samplers.  However in order to replay the trajectories we need to reproduce most of the random numbers generated  during the execution of the program while also generating diverging traces after each resampling step.  To solve these two issues AdvancedPS uses counter-based RNG introduced in [1] and widely used in large parallel systems see  StochasticDifferentialEquations or JAX for other implementations. ","category":"page"},{"location":"api/","page":"API","title":"API","text":"Under the hood AdvancedPS is using Random123 for the generators. Using counter-based RNG allows us to split generators thus creating new independent random streams. These generators are also wrapped in a AdvancedPS.TracedRNG type.  The TracedRNG keeps track of the keys generated at every split and can be reset to replay random streams.","category":"page"},{"location":"api/","page":"API","title":"API","text":"AdvancedPS.TracedRNG\nAdvancedPS.split\nAdvancedPS.load_state!\nAdvancedPS.save_state!","category":"page"},{"location":"api/#AdvancedPS.TracedRNG","page":"API","title":"AdvancedPS.TracedRNG","text":"TracedRNG{R,N,T}\n\nWrapped random number generator from Random123 to keep track of random streams during model evaluation\n\n\n\n\n\n","category":"type"},{"location":"api/#AdvancedPS.split","page":"API","title":"AdvancedPS.split","text":"split(key::Integer, n::Integer=1)\n\nSplit key into n new keys\n\n\n\n\n\n","category":"function"},{"location":"api/#AdvancedPS.load_state!","page":"API","title":"AdvancedPS.load_state!","text":"load_state!(r::TracedRNG)\n\nLoad state from current model iteration. Random streams are now replayed\n\n\n\n\n\n","category":"function"},{"location":"api/#AdvancedPS.save_state!","page":"API","title":"AdvancedPS.save_state!","text":"save_state!(r::TracedRNG)\n\nAdd current key of the inner rng in r to keys.\n\n\n\n\n\n","category":"function"},{"location":"api/#Internals","page":"API","title":"Internals","text":"","category":"section"},{"location":"api/#Particle-Sweep","page":"API","title":"Particle Sweep","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"AdvancedPS.ParticleContainer\nAdvancedPS.sweep!","category":"page"},{"location":"api/#AdvancedPS.ParticleContainer","page":"API","title":"AdvancedPS.ParticleContainer","text":"Data structure for particle filters\n\neffectiveSampleSize(pc :: ParticleContainer): Return the effective sample size of the particles in pc\n\n\n\n\n\n","category":"type"},{"location":"api/#AdvancedPS.sweep!","page":"API","title":"AdvancedPS.sweep!","text":"sweep!(rng, pc::ParticleContainer, resampler)\n\nPerform a particle sweep and return an unbiased estimate of the log evidence.\n\nThe resampling steps use the given resampler.\n\nReference\n\nDel Moral, P., Doucet, A., & Jasra, A. (2006). Sequential monte carlo samplers. Journal of the Royal Statistical Society: Series B (Statistical Methodology), 68(3), 411-436.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"[1]: John K. Salmon, Mark A. Moraes, Ron O. Dror, and David E. Shaw. 2011. Parallel random numbers: as easy as 1, 2, 3. In Proceedings of 2011 International Conference for High Performance Computing, Networking, Storage and Analysis (SC '11). Association for Computing Machinery, New York, NY, USA, Article 16, 1–12. DOI:https://doi.org/10.1145/2063384.2063405","category":"page"},{"location":"api/","page":"API","title":"API","text":"[2]: Andrieu, Christophe, Arnaud Doucet, and Roman Holenstein. \"Particle Markov chain Monte Carlo methods.\" Journal of the Royal Statistical Society: Series B (Statistical Methodology) 72, no. 3 (2010): 269-342.","category":"page"},{"location":"examples/particle-gibbs/#Particle-Gibbs-for-non-linear-models","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":"","category":"section"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":"using AdvancedPS\nusing Random\nusing Distributions\nusing Plots\nusing AbstractMCMC\nusing Random123\nusing Libtask: TArray\nusing Libtask","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":"We consider the following stochastic volatility model:","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":" x_t+1 = a x_t + v_t quad v_t sim mathcalN(0 r^2)","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":" y_t = e_t exp(frac12x_t) quad v_t sim mathcalN(0 1)","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":"Here we assume the static parameters theta = (q^2 r^2) are known and we are only interested in sampling from the latent state x_t. We can reformulate the above in terms of transition and observation densities:","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":" x_t+1 sim f_theta(x_t+1x_t) = mathcalN(a x_t q^2)","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":" y_t sim g_theta(y_tx_t) = mathcalN(0 exp(frac12x_t)^2)","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":"with the initial distribution f_0(x) = mathcalN(0 q^2).","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":"Parameters = @NamedTuple begin\n    a::Float64\n    q::Float64\n    T::Int\nend\n\nmutable struct NonLinearTimeSeries <: AbstractMCMC.AbstractModel\n    X::TArray\n    θ::Parameters\n    NonLinearTimeSeries(θ::Parameters) = new(TArray(Float64, θ.T), θ)\nend\n\nf(model::NonLinearTimeSeries, state, t) = Normal(model.θ.a * state, model.θ.q)\ng(model::NonLinearTimeSeries, state, t) = Normal(0, exp(0.5 * state)^2)\nf₀(model::NonLinearTimeSeries) = Normal(0, model.θ.q)","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":"Let's simulate some data","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":"a = 0.9   # State Variance\nq = 0.5   # Observation variance\nTₘ = 200  # Number of observation\nNₚ = 20   # Number of particles\nNₛ = 500  # Number of samples\nseed = 1  # Reproduce everything\n\nθ₀ = Parameters((a, q, Tₘ))\nrng = Random.MersenneTwister(seed)\n\nx = zeros(Tₘ)\ny = zeros(Tₘ)\n\nreference = NonLinearTimeSeries(θ₀)\nx[1] = 0\nfor t in 1:Tₘ\n    if t < Tₘ\n        x[t + 1] = rand(rng, f(reference, x[t], t))\n    end\n    y[t] = rand(rng, g(reference, x[t], t))\nend","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":"Here are the latent and observation series:","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":"plot(x; label=\"x\")\nxlabel!(\"t\")","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":"(Image: )","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":"plot(y; label=\"y\")\nxlabel!(\"x\")","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":"(Image: )","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":"Each model takes an AbstractRNG as input and generates the logpdf of the current transition:","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":"function (model::NonLinearTimeSeries)(rng::Random.AbstractRNG)\n    x₀ = rand(rng, f₀(model))\n    model.X[1] = x₀\n    score = logpdf(g(model, x₀, 1), y[1])\n    Libtask.produce(score)\n\n    for t in 2:(model.θ.T)\n        state = rand(rng, f(model, model.X[t - 1], t - 1))\n        model.X[t] = state\n        score = logpdf(g(model, state, t), y[t])\n        Libtask.produce(score)\n    end\nend","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":"AdvancedPS relies on Libtask to copy models during their execution but we need to make sure the internal data of each model is properly copied over as well.","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":"Libtask.tape_copy(model::NonLinearTimeSeries) = deepcopy(model)","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":"Here we use the particle gibbs kernel without adaptive resampling.","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":"model = NonLinearTimeSeries(θ₀)\npgas = AdvancedPS.PG(Nₚ, 1.0)\nchains = sample(rng, model, pgas, Nₛ; progress=false);","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":"The trajectories are not stored during the sampling and we need to regenerate the history of each sample if we want to look at the individual traces.","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":"function replay(particle::AdvancedPS.Particle)\n    trng = deepcopy(particle.rng)\n    Random123.set_counter!(trng.rng, 0)\n    trng.count = 1\n    model = NonLinearTimeSeries(θ₀)\n    trace = AdvancedPS.Trace(AdvancedPS.GenericModel(model, trng), trng)\n    score = AdvancedPS.advance!(trace, true)\n    while !isnothing(score)\n        score = AdvancedPS.advance!(trace, true)\n    end\n    return trace\nend\n\ntrajectories = map(chains) do sample\n    replay(sample.trajectory)\nend\n\nparticles = hcat([trajectory.model.f.X for trajectory in trajectories]...) # Concat all sampled states\nmean_trajectory = mean(particles; dims=2)","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":"We can now plot all the generated traces. Beyond the last few timesteps all the trajectories collapse into one. Using the ancestor updating step can help with the degeneracy problem.","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":"plot()\nscatter(particles; label=false, opacity=0.01, color=:black)\nplot!(x; color=:darkorange, label=\"Original Trajectory\")\nplot!(mean_trajectory; color=:dodgerblue, label=\"Mean trajectory\", opacity=0.9)\nxlabel!(\"t\")\nylabel!(\"State\")","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":"(Image: )","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":"We can also check the mixing as defined in the Gaussian State Space model example. As seen on the scatter plot above, we are mostly left with a single trajectory before timestep 150. The orange bar is the optimal mixing rate for the number of particles we use.","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":"update_rate = sum(abs.(diff(particles; dims=2)) .> 0; dims=2) / Nₛ\n\nplot(update_rate; label=false, ylim=[0, 1], legend=:bottomleft)\nhline!([1 - 1 / Nₚ]; label=\"N: $(Nₚ)\")\nxlabel!(\"Iteration\")\nylabel!(\"Update rate\")","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":"(Image: )","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":"","category":"page"},{"location":"examples/particle-gibbs/","page":"Particle Gibbs for non-linear models","title":"Particle Gibbs for non-linear models","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/gaussian-ssm/#Particle-Gibbs-for-Gaussian-state-space-model","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"","category":"section"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"using AdvancedPS\nusing Random\nusing Distributions\nusing Plots","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"We consider the following linear state-space model with Gaussian innovations. The latent state is a simple gaussian random walk and the observation is linear in the latent states, namely:","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":" x_t+1 = a x_t + epsilon_t quad epsilon_t sim mathcalN(0q^2)","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":" y_t = x_t + nu_t quad nu_t sim mathcalN(0 r^2)","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"Here we assume the static parameters theta = (a q^2 r^2) are known and we are only interested in sampling from the latent states x_t. To use particle gibbs with the ancestor sampling update step we need to provide both the transition and observation densities.","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"From the definition above we get:","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":" x_t+1 sim f_theta(x_t+1x_t) = mathcalN(a x_t q^2)","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":" y_t sim g_theta(y_tx_t) = mathcalN(x_t q^2)","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"as well as the initial distribution f_0(x) = mathcalN(0 q^2(1-a^2)).","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"To use AdvancedPS we first need to define a model type that subtypes AdvancedPS.AbstractStateSpaceModel.","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"Parameters = @NamedTuple begin\n    a::Float64\n    q::Float64\n    r::Float64\nend\n\nmutable struct LinearSSM <: AdvancedPS.AbstractStateSpaceModel\n    X::Vector{Float64}\n    θ::Parameters\n    LinearSSM(θ::Parameters) = new(Vector{Float64}(), θ)\nend","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"and the densities defined above.","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"f(m::LinearSSM, state, t) = Normal(m.θ.a * state, m.θ.q) # Transition density\ng(m::LinearSSM, state, t) = Normal(state, m.θ.r)         # Observation density\nf₀(m::LinearSSM) = Normal(0, m.θ.q^2 / (1 - m.θ.a^2))    # Initial state density","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"We also need to specify the dynamics of the system through the transition equations:","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"AdvancedPS.initialization: the initial state density\nAdvancedPS.transition: the state transition density\nAdvancedPS.observation: the observation score given the observed data\nAdvancedPS.isdone: signals the end of the execution for the model","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"AdvancedPS.initialization(model::LinearSSM) = f₀(model)\nAdvancedPS.transition(model::LinearSSM, state, step) = f(model, state, step)\nfunction AdvancedPS.observation(model::LinearSSM, state, step)\n    return logpdf(g(model, state, step), y[step])\nend\nAdvancedPS.isdone(::LinearSSM, step) = step > Tₘ","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"Everything is now ready to simulate some data.","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"a = 0.9   # Scale\nq = 0.32  # State variance\nr = 1     # Observation variance\nTₘ = 200  # Number of observation\nNₚ = 20   # Number of particles\nNₛ = 500  # Number of samples\nseed = 1  # Reproduce everything\n\nθ₀ = Parameters((a, q, r))\nrng = Random.MersenneTwister(seed)\n\nx = zeros(Tₘ)\ny = zeros(Tₘ)\n\nreference = LinearSSM(θ₀)\nx[1] = rand(rng, f₀(reference))\nfor t in 1:Tₘ\n    if t < Tₘ\n        x[t + 1] = rand(rng, f(reference, x[t], t))\n    end\n    y[t] = rand(rng, g(reference, x[t], t))\nend","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"Here are the latent and obseravation timeseries","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"plot(x; label=\"x\")\nxlabel!(\"t\")","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"(Image: )","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"plot(y; label=\"y\")\nxlabel!(\"x\")","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"(Image: )","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"AdvancedPS subscribes to the AbstractMCMC API. To sample we just need to define a Particle Gibbs kernel and a model interface.","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"model = LinearSSM(θ₀)\npgas = AdvancedPS.PGAS(Nₚ)\nchains = sample(rng, model, pgas, Nₛ; progress=false);","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"particles = hcat([chain.trajectory.model.X for chain in chains]...)\nmean_trajectory = mean(particles; dims=2);","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"This toy model is small enough to inspect all the generated traces:","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"scatter(particles; label=false, opacity=0.01, color=:black)\nplot!(x; color=:darkorange, label=\"Original Trajectory\")\nplot!(mean_trajectory; color=:dodgerblue, label=\"Mean trajectory\", opacity=0.9)\nxlabel!(\"t\")\nylabel!(\"State\")","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"(Image: )","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"We used a particle gibbs kernel with the ancestor updating step which should help with the particle degeneracy problem and improve the mixing. We can compute the update rate of x_t vs t defined as the proportion of times t where x_t gets updated:","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"update_rate = sum(abs.(diff(particles; dims=2)) .> 0; dims=2) / Nₛ","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"and compare it to the theoretical value of 1 - 1Nₚ.","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"plot(update_rate; label=false, ylim=[0, 1], legend=:bottomleft)\nhline!([1 - 1 / Nₚ]; label=\"N: $(Nₚ)\")\nxlabel!(\"Iteration\")\nylabel!(\"Update rate\")","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"(Image: )","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"","category":"page"},{"location":"examples/gaussian-ssm/","page":"Particle Gibbs for Gaussian state-space model","title":"Particle Gibbs for Gaussian state-space model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#AdvancedPS:-Particle-Samplers-for-Julia","page":"Home","title":"AdvancedPS: Particle Samplers for Julia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is a lightweight package that implements particle based Monte Carlo algorithms for the Turing ecosystem.","category":"page"},{"location":"#Installing-from-Julia","page":"Home","title":"Installing from Julia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install the package, use the following command inside the Julia REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"AdvancedPS\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"To load the package, use the command:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using AdvancedPS","category":"page"},{"location":"example/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"example/","page":"Examples","title":"Examples","text":"The following pages walk you through some examples using AdvancedPS and the Turing ecosystem.","category":"page"}]
}
